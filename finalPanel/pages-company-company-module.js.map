{"version":3,"sources":["./src/app/modules/main/pages/company/company-dialog/company-dialog.component.ts","./src/app/modules/main/pages/company/company-dialog/company-dialog.component.html","./src/app/modules/main/pages/company/company-routing.module.ts","./src/app/modules/main/pages/company/company.component.ts","./src/app/modules/main/pages/company/company.component.html","./src/app/modules/main/pages/company/company.module.ts","./src/app/modules/main/pages/company/confirmation-dialog/confirmation-dialog.component.ts","./src/app/modules/main/pages/company/confirmation-dialog/confirmation-dialog.component.html"],"names":[],"mappings":"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","file":"pages-company-company-module.js","sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Memes } from 'src/app/shared/interfaces/i-article';\nimport { ICompany } from 'src/app/shared/interfaces/i-company';\nimport { NotificationService } from '../../../services/notification.service';\nimport { CompanyService } from '../services/company.service';\n\n@Component({\n  selector: 'app-company-dialog',\n  templateUrl: './company-dialog.component.html',\n  styleUrls: ['./company-dialog.component.scss']\n})\nexport class CompanyDialogComponent implements OnInit {\n\n  companyForm!: FormGroup;\n  companyData!: Memes;\n  constructor(\n    public dialogRef: MatDialogRef<CompanyDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private companySvc: CompanyService,\n    private formB: FormBuilder,\n    private notiSvc: NotificationService) { \n      this.buildForm()\n    }\n\n  ngOnInit(): void {\n    if(this.data?.element){\n      this.companyForm.patchValue(this.data.element);\n    }\n  }\n\n  submitCompany() {\n    if(this.companyForm.invalid){\n      this.notiSvc.openSnackBar(\"Algunos de los campos son invalidos\", 3000)\n      return\n    }\n    this.setCompany()\n    if(this.data?.element){\n      this.companySvc.updateCompany(this.companyData).subscribe(\n        val => {\n          console.log(val)\n          this.notiSvc.openSnackBar(\"Meme \"+ this.companyData.name+ \" actualizada correctamente\", 2000)\n          this.dialogRef.close()\n        },\n        error => {\n          console.log(error)\n        }\n      )\n    } else {\n      this.companySvc.createCompanie(this.companyData).subscribe(\n        val => {\n          console.log(val)\n          this.notiSvc.openSnackBar(\"Meme agregado correctamente\", 2000)\n          this.dialogRef.close()\n        },\n        error => {\n          console.log(error)\n        }\n      )\n    }\n  }\n  setCompany(): void {\n    this.companyData = {\n      ...this.companyForm.value,\n      id: this.data?.element ? this.data?.element.id : null\n    }\n  }\n\n  buildForm(): void {\n    this.companyForm = this.formB.group({\n      name: ['', Validators.required],\n      url: ['', Validators.required]\n    })\n  }\n}\n","<div class=\"container-md\">\n    <h1 mat-dialog-title>{{ data.edit ? 'Editar meme' : 'Agregar meme' }}</h1>\n    <mat-dialog-content class=\"mat-typography\">\n      <form class=\"example-form\" autocomplete=\"off\" [formGroup]=\"companyForm\">\n\n          <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n            <mat-label>{{ data.edit ? 'Editar meme' : 'Nombre' }}</mat-label>\n            <input matInput placeholder=\"Ex. Liverpool\" formControlName=\"name\" required/>\n            <mat-error *ngIf=\"companyForm.controls['name'].invalid\">Introduce un nombre por favor</mat-error>\n          </mat-form-field>\n\n          <p></p>\n\n          <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n            <mat-label>{{ data.edit ? 'Editar url' : 'Url' }}</mat-label>\n            <input matInput placeholder=\"Ex. Liverpool\" formControlName=\"url\" required/>\n            <mat-error *ngIf=\"companyForm.controls['url'].invalid\">Introduce una url por favor</mat-error>\n          </mat-form-field>\n          \n      </form>\n    </mat-dialog-content>\n  \n    <mat-dialog-actions align=\"end\">\n      <button mat-button mat-dialog-close>Cancelar</button>\n      <button mat-raised-button color=\"accent\" type=\"submit\" (click)=\"submitCompany()\">{{ data.edit ? 'Editar Meme' : 'Agregar Url' }}</button>\n    </mat-dialog-actions>\n  </div>\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CompanyComponent } from './company.component';\r\n\r\n\r\nconst routes: Routes = [{path: '', component: CompanyComponent}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CompanyRoutingModule { }","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Memes } from 'src/app/shared/interfaces/i-article';\nimport { ICompany } from 'src/app/shared/interfaces/i-company';\nimport { NotificationService } from '../../services/notification.service';\nimport { CompanyDialogComponent } from './company-dialog/company-dialog.component';\nimport { ConfirmateDialogComponent } from './confirmation-dialog/confirmation-dialog.component';\nimport { CompanyService } from './services/company.service';\n\n@Component({\n  selector: 'app-company',\n  templateUrl: './company.component.html',\n  styleUrls: ['./company.component.scss']\n})\n\nexport class CompanyComponent implements OnInit {\n  displayedColumns: string[] = ['id', 'nombre' , 'active', 'edit', 'delete'];\n  dataSource: MatTableDataSource<Memes>;\n  companys: Memes[] = [\n  ]\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private companySvc: CompanyService, \n              public dialog: MatDialog,\n              private notiSvc: NotificationService) {\n  }\n\n  ngOnInit(): void {\n    this.getMemes();\n  }\n\n\n  openDialog(edit: boolean, element?: ICompany): void {\n    const dialogRef = this.dialog.open(CompanyDialogComponent, {\n      disableClose: false,\n      data: {edit, element},\n    }).afterClosed().subscribe((data: any) => {\n      if(!data){\n        this.getMemes();\n      }\n    });\n  }\n\n\n  deleteMeme(meme: Memes): void {\n    console.log(\"meme\", meme)\n    const dialogRef = this.dialog.open(ConfirmateDialogComponent, {\n      disableClose: false,\n      data: {meme},\n    }).afterClosed().subscribe((data: any) => {\n      if(!data){\n        this.getMemes();\n      }\n    });\n    /*this.companySvc.deleteMeme(meme).subscribe((data) => {\n      this.companySvc.deleteMeme(meme).subscribe(\n        val => {\n          console.log(val)\n          this.notiSvc.openSnackBar(\"Meme eliminado\", 2000)\n        },\n        error => {\n          console.log(error)\n        }\n      )\n    })*/\n  }\n\n  getMemes(): void {\n    this.companySvc.showCompanies().subscribe((data) => {\n      this.companys = data['data']\n      this.setData()\n    })\n  }\n\n\n  setData(): void {\n    this.dataSource = new MatTableDataSource();\n    this.dataSource.data = this.companys;\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(event: Event) {\n      const filterValue = (event.target as HTMLInputElement).value;\n      this.dataSource.filter = filterValue.trim().toLowerCase();\n\n      if (this.dataSource.paginator) {\n        this.dataSource.paginator.firstPage();\n      }\n    }\n}\n","<div class=\"mat-elevation-z8 container\"  style=\"margin-top: 3%;\">\n    <div>\n      <button mat-raised-button color=\"primary\" class=\"leftme\" style=\"margin-top: 10px; margin-left: 10px;\" (click)=\"openDialog(false)\">Agregar Meme</button>\n      <mat-form-field class=\"right\">\n        <mat-label>Buscar</mat-label>\n        <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Ej. Cimaco\" #input>\n        <mat-icon matSuffix>search</mat-icon>\n      </mat-form-field>\n    </div>\n  <div>\n    <table mat-table [dataSource]=\"dataSource\" matSort>\n  \n      <!-- ID Column -->\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.id}} </td>\n      </ng-container>\n  \n      <!-- Name Column -->\n      <ng-container matColumnDef=\"nombre\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Nombre </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.name}} </td>\n      </ng-container>\n\n      <!-- Progress Column -->\n      <ng-container matColumnDef=\"active\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Activo </th>\n        <td mat-cell *matCellDef=\"let row\"> \n          <button mat-icon-button color=\"warn\" aria-label=\"Example icon button with a heart icon\">\n            <mat-icon [ngStyle]=\"{'color': row.active == 1 ? 'green' : 'red'}\">circle</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"edit\">\n        <th mat-header-cell *matHeaderCellDef class=\"edit\"> Editar </th>\n        <td mat-cell *matCellDef=\"let row\" class=\"edit\"> \n          <button mat-icon-button color=\"accent\" aria-label=\"Example icon button with a heart icon\" (click)=\"openDialog(true, row)\">\n            <mat-icon >edit</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n\n      \n      <ng-container matColumnDef=\"delete\">\n        <th mat-header-cell *matHeaderCellDef class=\"edit\"> Eliminar </th>\n        <td mat-cell *matCellDef=\"let row\" class=\"edit\"> \n          <button mat-icon-button color=\"accent\" aria-label=\"Example icon button with a heart icon\" (click)=\"deleteMeme(row)\">\n            <mat-icon >delete</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n  \n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  \n      <!-- Row shown when there is no matching data. -->\n      <tr class=\"mat-row\" *matNoDataRow>\n        <td class=\"mat-cell\" colspan=\"4\">Sin datos que mostrar</td>\n      </tr>\n    </table>\n  \n    <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\n  </div>\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MaterialModule } from 'src/app/shared/modules/material.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CompanyComponent } from './company.component';\r\nimport { CompanyRoutingModule } from './company-routing.module';\r\nimport { CompanyDialogComponent } from './company-dialog/company-dialog.component';\r\nimport { ConfirmateDialogComponent } from './confirmation-dialog/confirmation-dialog.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [CompanyComponent, CompanyDialogComponent, ConfirmateDialogComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CompanyRoutingModule,\r\n    MaterialModule,\r\n    ReactiveFormsModule\r\n  ]\r\n})\r\nexport class CompanyModule { }\r\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Memes } from 'src/app/shared/interfaces/i-article';\nimport { apiToken } from 'src/app/shared/interfaces/i-auth';\nimport { ICompany } from 'src/app/shared/interfaces/i-company';\nimport { NotificationService } from '../../../services/notification.service';\nimport { CompanyService } from '../services/company.service';\n\n@Component({\n  selector: 'app-company-dialog',\n  templateUrl: './confirmation-dialog.component.html',\n  styleUrls: ['./confirmation-dialog.component.scss']\n})\nexport class ConfirmateDialogComponent implements OnInit {\n\n  companyForm!: FormGroup;\n  companyData!: Memes;\n  tokenData!: apiToken;\n  constructor(\n    public dialogRef: MatDialogRef<ConfirmateDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private companySvc: CompanyService,\n    private formB: FormBuilder,\n    private notiSvc: NotificationService) { \n      this.buildForm()\n    }\n\n  ngOnInit(): void {\n    console.log('Data', this.data.meme)\n    //97a40eba753a230156502543023\n  }\n\n  deleteMeme(){\n    this.setKey()\n    //this.companySvc.deleteMeme(this.data.element, this.tokenData).subscribe((data) => {\n      this.companySvc.deleteMeme(this.data.meme?.id, this.tokenData).subscribe(\n        val => {\n          console.log(val)\n          this.notiSvc.openSnackBar(\"Meme eliminado\", 2000)\n          this.dialogRef.close()\n        },\n        error => {\n          console.log(error)\n        }\n      )\n    //})\n  }\n\n  setKey(): void {\n    this.tokenData = {\n      api_key: this.companyForm.get('api_key')?.value\n    }\n  }\n\n  buildForm(): void {\n    this.companyForm = this.formB.group({\n      api_key: ['', Validators.required]\n    })\n  }\n}\n","<div class=\"container-md\">\n    <h1 mat-dialog-title>Confirmacion</h1>\n    <mat-dialog-content class=\"mat-typography\">\n      <form class=\"example-form\" autocomplete=\"off\" [formGroup]=\"companyForm\">\n\n          <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n            <mat-label>Introduzca el token para continuar</mat-label>\n            <input matInput formControlName=\"api_key\" required/>\n            <mat-error *ngIf=\"companyForm.controls['api_key'].invalid\">Introduzca su token por favor</mat-error>\n          </mat-form-field>\n\n          <p></p>\n          \n      </form>\n    </mat-dialog-content>\n  \n    <mat-dialog-actions align=\"end\">\n      <button mat-button mat-dialog-close>Cancelar</button>\n      <button mat-raised-button color=\"accent\" type=\"submit\" (click)=\"deleteMeme()\">Eliminar registro</button>\n    </mat-dialog-actions>\n  </div>\n"],"sourceRoot":"webpack:///"}