{"version":3,"sources":["./src/app/modules/auth/auth.module.ts","./src/app/modules/auth/auth.component.ts","./src/app/modules/auth/auth.component.html","./src/app/modules/auth/auth-routing.module.ts","./src/app/shared/guards/auth-login.guard.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACM;AAEW;AACT;;AAU1C,MAAM,UAAU;;yFAAV,UAAU;8IAAV,UAAU,kBALZ;YACP,4DAAY;YACZ,sEAAiB;SAClB;mIAEU,UAAU,mBANN,6DAAa,aAE1B,4DAAY;QACZ,sEAAiB;6FAGR,UAAU;cAPtB,sDAAQ;eAAC;gBACR,YAAY,EAAE,CAAC,6DAAa,CAAC;gBAC7B,OAAO,EAAE;oBACP,4DAAY;oBACZ,sEAAiB;iBAClB;aACF;;;;;;;;;;;;;;ACbD;AAAA;AAAA;AAAA;AAAkD;;;AAO3C,MAAM,aAAa;IAExB,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;0EALU,aAAa;6FAAb,aAAa;QCP1B,2EAA+B;;6FDOlB,aAAa;cALzB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,uBAAuB;gBACpC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AACiB;;;AAGxE,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,0NAAoC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,CAAC,qFAAc,CAAC,EAAC;IAC9H,EAAE,IAAI,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,4OAA0C,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,EAAE,OAAO,EAAE,CAAC,qFAAc,CAAC,EAAC;CAC3I,CAAC;AAMK,MAAM,iBAAiB;;gGAAjB,iBAAiB;4JAAjB,iBAAiB,kBAHnB,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAC9B,4DAAY;mIAEX,iBAAiB,uFAFlB,4DAAY;6FAEX,iBAAiB;cAJ7B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAIgB;;;;AAKpD,MAAM,cAAc;IACzB,YAAoB,OAAoB,EAAU,MAAc;QAA5C,YAAO,GAAP,OAAO,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;IAAE,CAAC;IACnE,WAAW,CACT,KAA6B,EAC7B,KAA0B;QACxB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED,OAAO;QACL,MAAM,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,wEAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QACjF,IAAI,YAAY,EAAC;YACf,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;SAC3C;QACD,OAAO,CAAC,YAAY,CAAC;IACvB,CAAC;;4EAdU,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFb,MAAM;6FAEP,cAAc;cAH1B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB","file":"modules-auth-auth-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { AuthComponent } from './auth.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [AuthComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AuthRoutingModule\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<router-outlet></router-outlet>\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthLoginGuard } from 'src/app/shared/guards/auth-login.guard';\r\nimport { AuthComponent } from './auth.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', loadChildren: () => import('./pages/login/login.module').then(m => m.LoginModule), canLoad: [AuthLoginGuard]},\r\n  { path: 'register', loadChildren: () => import('./pages/register/register.module').then(m => m.RegisterModule), canLoad: [AuthLoginGuard]}\r\n];\r\n\r\n@NgModule({ \r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { Route } from '@angular/compiler/src/core';\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, CanLoad, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { DataService } from 'src/app/modules/auth/services/data.service';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthLoginGuard implements CanActivate, CanLoad {\n  constructor(private dataSvc: DataService, private router: Router){}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean {\n      return this.canLoad();\n  }\n\n  canLoad(): boolean{\n    const onIsLoggedIn = localStorage.getItem(environment.NAME_TOKEN) ? true : false;\n    if (onIsLoggedIn){\n      this.router.navigate(['/panel/empresas']);\n    }\n    return !onIsLoggedIn;\n  }\n}\n"],"sourceRoot":"webpack:///"}